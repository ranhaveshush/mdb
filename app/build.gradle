apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'androidx.navigation.safeargs.kotlin'

apply from: "${project.rootDir}/config/gradle/moduleTasks.gradle"

if (file('local.gradle').exists()) {
    apply from: 'local.gradle'
} else {
    throw new GradleException(
            "${project.rootDir}/local.gradle file doesn't exists."
                    + "\nCreate a local.gradle file from the local.gradle.example file."
                    + "\nImportant: paste your TMDb api key there.")
}

android {
    compileSdkVersion version_compile_sdk
    defaultConfig {
        applicationId "com.ranhaveshush.mdb"
        minSdkVersion version_min_sdk
        targetSdkVersion version_target_sdk
        versionCode version_code
        versionName version_name
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro',
                    "$project.projectDir/proguard/okio.pro",
                    "$project.projectDir/proguard/okhttp3.pro",
                    "$project.projectDir/proguard/retrofit.pro"
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility version_java
        targetCompatibility version_java
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${version_kotlin}"
    implementation "androidx.core:core-ktx:${version_core_ktx}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${version_kotlinx_coroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${version_kotlinx_coroutines}"
    // AndroidX UI
    implementation "androidx.legacy:legacy-support-v4:${version_legacy}"
    implementation "androidx.appcompat:appcompat:${version_appcompat}"
    implementation "androidx.constraintlayout:constraintlayout:${version_constraintlayout}"
    // AndroidX lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:${version_lifecycle}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${version_lifecycle}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${version_lifecycle}"
    // AndroidX navigation
    implementation "androidx.navigation:navigation-fragment-ktx:${version_navigation}"
    implementation "androidx.navigation:navigation-ui-ktx:${version_navigation}"
    // AndroidX paging
    implementation "androidx.paging:paging-runtime-ktx:${version_paging}"
    // Dagger
    implementation "com.google.dagger:dagger:${version_dagger}"
    kapt "com.google.dagger:dagger-compiler:${version_dagger}"
    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:${version_retrofit}"
    implementation "com.squareup.retrofit2:converter-moshi:${version_retrofit}"
    implementation "com.squareup.okhttp3:logging-interceptor:${version_logging_interceptor}"
    // Coil - Co-routines Image Loading.
    implementation "io.coil-kt:coil:${version_coil}"
    // Test
    testImplementation "junit:junit:${version_junit}"
    androidTestImplementation "androidx.test.ext:junit-ktx:${version_ext_junit}"
    androidTestImplementation "androidx.test:runner:${version_runner}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${version_espresso_core}"
}

// Force kotlin compiler to work with the current JVM target java version.
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = version_java
    }
}
